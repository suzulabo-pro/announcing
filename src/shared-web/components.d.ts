/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Announce, AnnounceAndMeta, PostJSON } from "../shared";
import { ApNaviLink, PromiseState, RouteMatch } from ".";
import { Icons } from "./components/ap-icon/ap-icon";
export namespace Components {
    interface ApAnnounce {
        "announce": AnnounceAndMeta;
        "href"?: string;
        "iconImgPromise"?: PromiseState<string>;
        "icons"?: {
    follow: boolean;
    notification: boolean;
  };
        "showDetails"?: boolean;
    }
    interface ApCheckbox {
        "checked"?: boolean;
        "label"?: string;
    }
    interface ApError {
        "msgs": {
    main: string;
    close: string;
    showErrors: string;
    datetime: (d: number) => string;
  };
    }
    interface ApHead {
        "pageTitle"?: string;
        "writeHead": () => Promise<void>;
    }
    interface ApIcon {
        "icon"?: Icons;
    }
    interface ApImage {
        "href"?: string;
        "srcPromise"?: PromiseState<string>;
    }
    interface ApImageInput {
        "border"?: boolean;
        "data"?: string;
        "label"?: string;
        "resizeRect": { width: number; height: number };
    }
    interface ApInput {
        "label"?: string;
        "maxLength"?: number;
        "textarea"?: boolean;
        "value"?: string;
    }
    interface ApLoading {
    }
    interface ApModal {
    }
    interface ApNavi {
        "links": ApNaviLink[];
        "position": 'fixed' | 'sticky';
    }
    interface ApPost {
        "imgHref"?: string;
        "imgPromise"?: PromiseState<string>;
        "imgs"?: { srcPromise: PromiseState<string>; href?: string }[];
        "msgs": {
    datetime: (v: number) => string;
  };
        "post": PostJSON;
        "showTweet"?: boolean;
        "showYoutube"?: boolean;
    }
    interface ApPosts {
        "hrefFormat"?: string;
        "msgs": {
    datetime: (d: number) => string;
    dataError: string;
  };
        "posts": Announce['posts'];
        "postsPromises": Record<string, PromiseState<PostJSON>>;
    }
    interface ApRoot {
        "componentProps"?: { [k: string]: any };
        "defaultPath": string;
        "headerTitle": string;
        "redirect"?: (p: string) => string | undefined;
        "routeMatches": RouteMatch[];
    }
    interface ApSpinner {
    }
    interface ApStyle {
    }
    interface ApTextview {
        "text"?: string;
    }
    interface ApTwitter {
        "tweetID"?: string;
    }
    interface ApYoutube {
        "youtubeID"?: string;
    }
}
declare global {
    interface HTMLApAnnounceElement extends Components.ApAnnounce, HTMLStencilElement {
    }
    var HTMLApAnnounceElement: {
        prototype: HTMLApAnnounceElement;
        new (): HTMLApAnnounceElement;
    };
    interface HTMLApCheckboxElement extends Components.ApCheckbox, HTMLStencilElement {
    }
    var HTMLApCheckboxElement: {
        prototype: HTMLApCheckboxElement;
        new (): HTMLApCheckboxElement;
    };
    interface HTMLApErrorElement extends Components.ApError, HTMLStencilElement {
    }
    var HTMLApErrorElement: {
        prototype: HTMLApErrorElement;
        new (): HTMLApErrorElement;
    };
    interface HTMLApHeadElement extends Components.ApHead, HTMLStencilElement {
    }
    var HTMLApHeadElement: {
        prototype: HTMLApHeadElement;
        new (): HTMLApHeadElement;
    };
    interface HTMLApIconElement extends Components.ApIcon, HTMLStencilElement {
    }
    var HTMLApIconElement: {
        prototype: HTMLApIconElement;
        new (): HTMLApIconElement;
    };
    interface HTMLApImageElement extends Components.ApImage, HTMLStencilElement {
    }
    var HTMLApImageElement: {
        prototype: HTMLApImageElement;
        new (): HTMLApImageElement;
    };
    interface HTMLApImageInputElement extends Components.ApImageInput, HTMLStencilElement {
    }
    var HTMLApImageInputElement: {
        prototype: HTMLApImageInputElement;
        new (): HTMLApImageInputElement;
    };
    interface HTMLApInputElement extends Components.ApInput, HTMLStencilElement {
    }
    var HTMLApInputElement: {
        prototype: HTMLApInputElement;
        new (): HTMLApInputElement;
    };
    interface HTMLApLoadingElement extends Components.ApLoading, HTMLStencilElement {
    }
    var HTMLApLoadingElement: {
        prototype: HTMLApLoadingElement;
        new (): HTMLApLoadingElement;
    };
    interface HTMLApModalElement extends Components.ApModal, HTMLStencilElement {
    }
    var HTMLApModalElement: {
        prototype: HTMLApModalElement;
        new (): HTMLApModalElement;
    };
    interface HTMLApNaviElement extends Components.ApNavi, HTMLStencilElement {
    }
    var HTMLApNaviElement: {
        prototype: HTMLApNaviElement;
        new (): HTMLApNaviElement;
    };
    interface HTMLApPostElement extends Components.ApPost, HTMLStencilElement {
    }
    var HTMLApPostElement: {
        prototype: HTMLApPostElement;
        new (): HTMLApPostElement;
    };
    interface HTMLApPostsElement extends Components.ApPosts, HTMLStencilElement {
    }
    var HTMLApPostsElement: {
        prototype: HTMLApPostsElement;
        new (): HTMLApPostsElement;
    };
    interface HTMLApRootElement extends Components.ApRoot, HTMLStencilElement {
    }
    var HTMLApRootElement: {
        prototype: HTMLApRootElement;
        new (): HTMLApRootElement;
    };
    interface HTMLApSpinnerElement extends Components.ApSpinner, HTMLStencilElement {
    }
    var HTMLApSpinnerElement: {
        prototype: HTMLApSpinnerElement;
        new (): HTMLApSpinnerElement;
    };
    interface HTMLApStyleElement extends Components.ApStyle, HTMLStencilElement {
    }
    var HTMLApStyleElement: {
        prototype: HTMLApStyleElement;
        new (): HTMLApStyleElement;
    };
    interface HTMLApTextviewElement extends Components.ApTextview, HTMLStencilElement {
    }
    var HTMLApTextviewElement: {
        prototype: HTMLApTextviewElement;
        new (): HTMLApTextviewElement;
    };
    interface HTMLApTwitterElement extends Components.ApTwitter, HTMLStencilElement {
    }
    var HTMLApTwitterElement: {
        prototype: HTMLApTwitterElement;
        new (): HTMLApTwitterElement;
    };
    interface HTMLApYoutubeElement extends Components.ApYoutube, HTMLStencilElement {
    }
    var HTMLApYoutubeElement: {
        prototype: HTMLApYoutubeElement;
        new (): HTMLApYoutubeElement;
    };
    interface HTMLElementTagNameMap {
        "ap-announce": HTMLApAnnounceElement;
        "ap-checkbox": HTMLApCheckboxElement;
        "ap-error": HTMLApErrorElement;
        "ap-head": HTMLApHeadElement;
        "ap-icon": HTMLApIconElement;
        "ap-image": HTMLApImageElement;
        "ap-image-input": HTMLApImageInputElement;
        "ap-input": HTMLApInputElement;
        "ap-loading": HTMLApLoadingElement;
        "ap-modal": HTMLApModalElement;
        "ap-navi": HTMLApNaviElement;
        "ap-post": HTMLApPostElement;
        "ap-posts": HTMLApPostsElement;
        "ap-root": HTMLApRootElement;
        "ap-spinner": HTMLApSpinnerElement;
        "ap-style": HTMLApStyleElement;
        "ap-textview": HTMLApTextviewElement;
        "ap-twitter": HTMLApTwitterElement;
        "ap-youtube": HTMLApYoutubeElement;
    }
}
declare namespace LocalJSX {
    interface ApAnnounce {
        "announce": AnnounceAndMeta;
        "href"?: string;
        "iconImgPromise"?: PromiseState<string>;
        "icons"?: {
    follow: boolean;
    notification: boolean;
  };
        "showDetails"?: boolean;
    }
    interface ApCheckbox {
        "checked"?: boolean;
        "label"?: string;
    }
    interface ApError {
        "msgs"?: {
    main: string;
    close: string;
    showErrors: string;
    datetime: (d: number) => string;
  };
    }
    interface ApHead {
        "pageTitle"?: string;
    }
    interface ApIcon {
        "icon"?: Icons;
    }
    interface ApImage {
        "href"?: string;
        "srcPromise"?: PromiseState<string>;
    }
    interface ApImageInput {
        "border"?: boolean;
        "data"?: string;
        "label"?: string;
        "onImageChange"?: (event: CustomEvent<string>) => void;
        "onImageResizing"?: (event: CustomEvent<boolean>) => void;
        "resizeRect"?: { width: number; height: number };
    }
    interface ApInput {
        "label"?: string;
        "maxLength"?: number;
        "textarea"?: boolean;
        "value"?: string;
    }
    interface ApLoading {
    }
    interface ApModal {
        "onClose"?: (event: CustomEvent<any>) => void;
    }
    interface ApNavi {
        "links": ApNaviLink[];
        "position"?: 'fixed' | 'sticky';
    }
    interface ApPost {
        "imgHref"?: string;
        "imgPromise"?: PromiseState<string>;
        "imgs"?: { srcPromise: PromiseState<string>; href?: string }[];
        "msgs": {
    datetime: (v: number) => string;
  };
        "post": PostJSON;
        "showTweet"?: boolean;
        "showYoutube"?: boolean;
    }
    interface ApPosts {
        "hrefFormat"?: string;
        "msgs": {
    datetime: (d: number) => string;
    dataError: string;
  };
        "posts": Announce['posts'];
        "postsPromises": Record<string, PromiseState<PostJSON>>;
    }
    interface ApRoot {
        "componentProps"?: { [k: string]: any };
        "defaultPath"?: string;
        "headerTitle"?: string;
        "redirect"?: (p: string) => string | undefined;
        "routeMatches": RouteMatch[];
    }
    interface ApSpinner {
    }
    interface ApStyle {
    }
    interface ApTextview {
        "text"?: string;
    }
    interface ApTwitter {
        "tweetID"?: string;
    }
    interface ApYoutube {
        "youtubeID"?: string;
    }
    interface IntrinsicElements {
        "ap-announce": ApAnnounce;
        "ap-checkbox": ApCheckbox;
        "ap-error": ApError;
        "ap-head": ApHead;
        "ap-icon": ApIcon;
        "ap-image": ApImage;
        "ap-image-input": ApImageInput;
        "ap-input": ApInput;
        "ap-loading": ApLoading;
        "ap-modal": ApModal;
        "ap-navi": ApNavi;
        "ap-post": ApPost;
        "ap-posts": ApPosts;
        "ap-root": ApRoot;
        "ap-spinner": ApSpinner;
        "ap-style": ApStyle;
        "ap-textview": ApTextview;
        "ap-twitter": ApTwitter;
        "ap-youtube": ApYoutube;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ap-announce": LocalJSX.ApAnnounce & JSXBase.HTMLAttributes<HTMLApAnnounceElement>;
            "ap-checkbox": LocalJSX.ApCheckbox & JSXBase.HTMLAttributes<HTMLApCheckboxElement>;
            "ap-error": LocalJSX.ApError & JSXBase.HTMLAttributes<HTMLApErrorElement>;
            "ap-head": LocalJSX.ApHead & JSXBase.HTMLAttributes<HTMLApHeadElement>;
            "ap-icon": LocalJSX.ApIcon & JSXBase.HTMLAttributes<HTMLApIconElement>;
            "ap-image": LocalJSX.ApImage & JSXBase.HTMLAttributes<HTMLApImageElement>;
            "ap-image-input": LocalJSX.ApImageInput & JSXBase.HTMLAttributes<HTMLApImageInputElement>;
            "ap-input": LocalJSX.ApInput & JSXBase.HTMLAttributes<HTMLApInputElement>;
            "ap-loading": LocalJSX.ApLoading & JSXBase.HTMLAttributes<HTMLApLoadingElement>;
            "ap-modal": LocalJSX.ApModal & JSXBase.HTMLAttributes<HTMLApModalElement>;
            "ap-navi": LocalJSX.ApNavi & JSXBase.HTMLAttributes<HTMLApNaviElement>;
            "ap-post": LocalJSX.ApPost & JSXBase.HTMLAttributes<HTMLApPostElement>;
            "ap-posts": LocalJSX.ApPosts & JSXBase.HTMLAttributes<HTMLApPostsElement>;
            "ap-root": LocalJSX.ApRoot & JSXBase.HTMLAttributes<HTMLApRootElement>;
            "ap-spinner": LocalJSX.ApSpinner & JSXBase.HTMLAttributes<HTMLApSpinnerElement>;
            "ap-style": LocalJSX.ApStyle & JSXBase.HTMLAttributes<HTMLApStyleElement>;
            "ap-textview": LocalJSX.ApTextview & JSXBase.HTMLAttributes<HTMLApTextviewElement>;
            "ap-twitter": LocalJSX.ApTwitter & JSXBase.HTMLAttributes<HTMLApTwitterElement>;
            "ap-youtube": LocalJSX.ApYoutube & JSXBase.HTMLAttributes<HTMLApYoutubeElement>;
        }
    }
}
